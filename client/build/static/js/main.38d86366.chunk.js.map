{"version":3,"sources":["components/filter-button.js","components/filter-modal.js","components/popup.js","App.js","serviceWorker.js","index.js"],"names":["FilterButton","tooltip","Tooltip","id","Button","className","onClick","this","props","showFilterModal","icon","faFilter","color","style","height","cursor","React","Component","FilterModal","onShow","clearForm","setState","name","address","city","state","zipcode","onSubmit","e","a","preventDefault","body","axios","post","res","filterLocations","data","handleHide","console","log","Modal","show","onHide","Header","closeButton","Title","Body","Form","Group","Label","Control","type","value","onChange","target","variant","PopupComponent","reportInfo","Swal","fire","title","text","input","showCancelButton","inputValidator","length","split","coordinates","latitude","feature","longitude","href","rel","OverlayTrigger","placement","overlay","faExclamationCircle","verticalAlign","Popup","L","Icon","Default","imagePath","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","require","iconUrl","shadowUrl","colorString","layer","width","fill","divIcon","iconAnchor","labelAnchor","popupAnchor","html","HealthcareMap","markerLayer","locations","LayersControl","Overlay","ReactDOMServer","renderToString","checked","LayerGroup","map","l","Marker","key","_id","position","clinics","filter","dentists","hospitals","get","Map","center","top","bottom","maxZoom","zoom","TileLayer","url","attribution","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38d86366.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Tooltip } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFilter } from '@fortawesome/fontawesome-free-solid'\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nexport default class FilterButton extends React.Component {\n  tooltip = () => ( \n    <Tooltip id=\"tooltip\">Filter</Tooltip>\n  )\n\n  render() {\n    return (\n      // <OverlayTrigger placement=\"right\" overlay={this.tooltip}>\n        <Button \n          className='filter-button'\n          onClick={this.props.showFilterModal}\n        >\n          <FontAwesomeIcon\n            icon={faFilter} \n            color='black' \n            style={{ height: '0.75em' }}\n            cursor='pointer'\n          />\n        </Button>\n      // </OverlayTrigger>\n    )\n  }\n}","import React from 'react'\nimport { Button, Form, Modal } from 'react-bootstrap'\nimport axios from 'axios'\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\nexport default class FilterModal extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      name: '',\n      address: '',\n      city: '',\n      state: '',\n      zipcode: '',\n    }\n  }\n\n  onShow = () => {\n    // this.setState({\n    //   name: '',\n    //   address: '',\n    //   city: '',\n    //   state: '',\n    //   zipcode: '',\n    // })\n  }\n\n  clearForm = () => {\n    this.setState({\n      name: '',\n      address: '',\n      city: '',\n      state: '',\n      zipcode: '',\n    })\n  }\n\n  onSubmit = async(e) => {\n    e.preventDefault()\n\n    const body = {\n      name: this.state.name,\n      address: this.state.address,\n      city: this.state.city,\n      state: this.state.state,\n      zipcode: this.state.zipcode\n    }\n\n    try {\n      const res = await axios.post('http://localhost:5000/locations/filter', body)\n\n      this.props.filterLocations(res.data)\n      this.props.handleHide()\n    } catch(err) {\n      console.log(`Error filtering locations: ${err}`)\n    }\n  }\n\n  render() {\n    return (\n      <Modal show={this.props.show} onShow={this.onShow} onHide={this.props.handleHide}>\n        <Modal.Header closeButton>\n          <Modal.Title>Filter Locations</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form onSubmit={this.onSubmit}>\n            <Form.Group>\n              <Form.Label>Name: </Form.Label>\n              <Form.Control \n                type='search'\n                value={this.state.name}\n                onChange={(e) => this.setState({ name: e.target.value })}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>Address: </Form.Label>\n              <Form.Control \n                type='search'\n                value={this.state.address}\n                onChange={(e) => this.setState({ address: e.target.value })}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>City: </Form.Label>\n              <Form.Control \n                type='search'\n                value={this.state.city}\n                onChange={(e) => this.setState({ city: e.target.value })}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>State: </Form.Label>\n              <Form.Control \n                type='search'\n                value={this.state.state}\n                onChange={(e) => this.setState({ state: e.target.value })}\n              />\n            </Form.Group>\n\n            <Form.Group>\n              <Form.Label>ZIP Code: </Form.Label>\n              <Form.Control \n                type='search'\n                value={this.state.zipcode}\n                onChange={(e) => this.setState({ zipcode: e.target.value })}\n              />\n            </Form.Group>\n            \n            <Button className=\"mr-2\" variant='secondary' value='Clear Form' onClick={this.clearForm}>Clear</Button>\n            <Button type='submit' value='Filter Locations'>Filter</Button>\n          </Form>\n        </Modal.Body>\n      </Modal>\n    )\n  }\n}","import React from 'react'\nimport { Popup } from 'react-leaflet'\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExclamationCircle } from '@fortawesome/fontawesome-free-solid'\nimport Swal from 'sweetalert2'\nimport 'sweetalert2/src/sweetalert2.scss'\n\n\nexport default class PopupComponent extends React.Component {\n  reportInfo = async() => {\n    const reason = await Swal.fire({\n      title: 'Report Incorrect Info',\n      text: 'Enter reason for report:',\n      input: 'textarea',\n      showCancelButton: true,\n      inputValidator: (value) => {\n        if (!value) return 'You must provide a reason.'\n\n        if (value.length < 5) return 'Reason must be at least 5 characters long.'\n\n        if (value.split(\" \" ).length < 2) return 'Reason must be at least 2 words long.'\n      }\n    })\n\n    if (reason.value) {\n      Swal.fire('Success', 'Report has been sent.', 'success')\n    }\n  }\n\n  coordinates = () => {\n    const latitude = this.props.feature.coordinates[0]\n    const longitude = this.props.feature.coordinates[1]\n    const tooltip = ( <Tooltip>Report Incorrect Info</Tooltip> )\n\n    return (\n      <div>\n        <a \n          href={`https://www.google.com/maps?&z=15&q=${latitude},${longitude}&ll=${latitude},${longitude}`} \n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Open in Google Maps\n        </a>&nbsp;\n        <OverlayTrigger placement='right' overlay={tooltip}>\n          <FontAwesomeIcon\n            icon={faExclamationCircle} \n            color='darkred' \n            style={{ height: '2em', verticalAlign: 'middle' }}\n            cursor='pointer'\n            onClick={this.reportInfo}\n          />\n        </OverlayTrigger>\n        <br/>\n      </div>\n    )\n  }\n\n  render() {\n    const { name, address, city, state, zipcode } = this.props.feature\n\n    return (\n      <Popup>\n        <span className='font-weight-bold'>{name}</span><br/>\n        <span>{address}</span><br/>\n        <span>{`${city}, ${state} ${zipcode}`}</span><br/>\n        {this.coordinates()}\n      </Popup>\n    )\n  }\n}","import React from 'react'\nimport ReactDOMServer from 'react-dom/server'\nimport axios from 'axios'\nimport L from 'leaflet'\nimport { Map, Marker, LayersControl, LayerGroup, TileLayer } from 'react-leaflet'\nimport Control from 'react-leaflet-control'\nimport { Rectangle } from 'react-shapes'\nimport FilterButton from './components/filter-button'\nimport FilterModal from './components/filter-modal'\nimport Popup from './components/popup'\nimport 'leaflet/dist/leaflet.css'\nimport './css/app.css'\n\nL.Icon.Default.imagePath =\n'../node_modules/leaflet'\n\ndelete L.Icon.Default.prototype._getIconUrl;\n\nL.Icon.Default.mergeOptions({\n    iconRetinaUrl: require('leaflet/dist/images/marker-icon-2x.png'),\n    iconUrl: require('leaflet/dist/images/marker-icon.png'),\n    shadowUrl: require('leaflet/dist/images/marker-shadow.png')\n});\n\n\nconst color = (type) => {\n  switch(type) {\n    case 'Clinics': return 'blue';\n    case 'Dentists': return 'green';\n    case 'Hospitals': return 'red';\n    default: return 'black'\n  }\n}\n\nconst colorString = (type) => {\n  let color = ''\n  let layer\n  switch(type) {\n    case 'Clinics': layer = 'Clinics'; color = 'blue'; break;\n    case 'Dentists': layer = 'Dentists'; color = 'green'; break;\n    case 'Hospitals': layer = 'Hospitals'; color = 'red'; break;\n    default: color = '#000000'; break;\n  }\n\n  return (\n    <div className='layerControl'>\n      <div className='layerColor'>\n      <Rectangle width={12} height={12} fill={{ color }} />\n      </div>\n      <div className='layerName'>\n        {layer}\n      </div>\n    </div>\n  )\n}\n\nconst markerHtmlStyles = (type) => {\n  return `\n    background-color: ${color(type)};\n    width: 1rem;\n    height: 1rem;\n    display: block;\n    left: -.5rem;\n    top: -.5rem;\n    position: relative;\n    border-radius: 1rem 1rem 0;\n    transform: rotate(45deg);\n    border: 1px solid #FFFFFF\n  `\n}\n\nconst icon = (name) => {\n  return L.divIcon({\n    className: \"my-custom-pin\",\n    iconAnchor: [0, 24],\n    labelAnchor: [-6, 0],\n    popupAnchor: [0, -36],\n    html: `<span style=\"${markerHtmlStyles(name)}\" />`\n  })\n}\n\nexport default class HealthcareMap extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      clinics: [],\n      dentists: [],\n      hospitals: [],\n      showFilterModal: false,\n    }\n  }\n\n  async componentDidMount() {\n    try {\n      const res = await axios.get('http://localhost:5000/locations')\n      this.setState({\n        clinics: res.data.filter(l => l.type === 'clinic'),\n        dentists: res.data.filter(l => l.type === 'dentist'),\n        hospitals: res.data.filter(l => l.type === 'hospital')\n      })\n    } catch(err) {\n      console.log(`Error fetching locations: ${err}`)\n    }\n  }\n\n  markerLayer = (type, locations) => {\n    return (\n      <LayersControl.Overlay \n      name={ReactDOMServer.renderToString(colorString(type))}\n      checked={true}\n      >\n        <LayerGroup>\n          {locations.map(l => (\n            <Marker key={l._id} position={l.coordinates} icon={icon(type)}>\n              <Popup feature={l}/>\n            </Marker>\n          ))}\n        </LayerGroup>\n      </LayersControl.Overlay>\n    )\n  }\n\n  filterLocations = (locations) => {\n    this.setState({\n      clinics: locations.filter(l => l.type === 'clinic'),\n      dentists: locations.filter(l => l.type === 'dentist'),\n      hospitals: locations.filter(l => l.type === 'hospital'),\n    })\n  }\n\n  render () {\n    return (\n      <Map \n        center={[30.2, -96.5]}\n        style={{position: 'absolute', width: '100%', top: 0, bottom: 0 }} \n        maxZoom={20}\n        zoom={9}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n        />\n        <LayersControl>\n          {this.markerLayer('Clinics', this.state.clinics)}\n          {this.markerLayer('Dentists', this.state.dentists)}\n          {this.markerLayer('Hospitals', this.state.hospitals)}\n        </LayersControl>\n        <Control position='topleft'>\n          <FilterButton showFilterModal={() => this.setState({ showFilterModal: true })}/>\n        </Control>\n        <FilterModal \n          show={this.state.showFilterModal} \n          handleHide={() => this.setState({ showFilterModal: false })}\n          filterLocations={this.filterLocations}\n        />\n      </Map>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}